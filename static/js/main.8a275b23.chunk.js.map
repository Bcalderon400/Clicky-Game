{"version":3,"sources":["ImageFileNames.js","components/Navbar/Navbar.js","components/Banner/Banner.js","components/ImageBlock/ImageBlock.js","components/ImageBlockListing/ImageBlockListing.js","components/Footer/Footer.js","App.js","index.js"],"names":["ImageFileNames","Navbar","props","className","href","id","gameStatus","feedback","score","topScore","Banner","ImageBlock","src","imageFileName","alt","height","imageBlockHeight","width","imageBlockWidth","onClick","clickHandler","ImageBlockListing","imageFileNames","map","index","key","Footer","target","rel","App","state","clickedImages","handleClick","event","clickedImageFileName","imageClickedBefore","setState","shuffle","newScore","length","clickedImagesCopy","slice","push","newTopScore","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","this","console","log","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a275b23.chunk.js","sourcesContent":["let ImageFileNames = [\r\n  \"challenger.jpg\",\r\n  \"judge.jpg\",\r\n  \"mustang.jpg\",\r\n  \"charger.jpg\",\r\n  \"cuda.jpg\",\r\n  \"barricuda.jpg\",\r\n  \"transam.jpg\",\r\n  \"firebird.jpg\",\r\n  \"442.jpg\",\r\n  \"gt500.jpg\",\r\n  \"elcamino.jpg\",\r\n  \"hudson.jpg\",\r\n  \"gto.jpg\",\r\n  \"chevelle.jpg\",\r\n  \"cobra.jpg\",\r\n  \"torino.jpg\"\r\n];\r\n\r\nexport default ImageFileNames;\r\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <div className=\"bg-dark navbar-dark container-fluid text-center pt-1 pb-1\">\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <h2>\r\n          <a href=\".\" className=\"text-white nounderline\" id=\"app-name\">\r\n            Clicky Game\r\n          </a>\r\n        </h2>\r\n      </div>\r\n      <div\r\n        className={\r\n          \"col-md-4 \" +\r\n          (props.gameStatus == \"2\"\r\n            ? \" text-danger\"\r\n            : props.gameStatus == \"1\"\r\n            ? \" text-success\"\r\n            : \" text-info\")\r\n        }\r\n      >\r\n        <h3>{props.feedback}</h3>\r\n      </div>\r\n      <div className=\"col-md-4 text-muted\">\r\n        <h3>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => (\r\n  <div className=\"jumbotron jumbotron-fluid text-center mdb-color lighten-2 white-text mx-2 mb-5\">\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 offset-md-2 offset-md-right-2\">\r\n          <h1>Muscle Car click game!</h1>\r\n          <h4>\r\n            Click on an image to earn points, but don't click on any more than\r\n            once!\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\nimport \"./ImageBlock.css\";\r\n\r\nconst ImageBlock = props => (\r\n  <img\r\n    className={\r\n      \"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock rounded-circle \" +\r\n      (props.gameStatus == \"2\"\r\n        ? \" gameLost\"\r\n        : props.gameStatus == \"1\"\r\n        ? \" gameWon\"\r\n        : \"\")\r\n    }\r\n    src={process.env.PUBLIC_URL + \"/images/\" + props.imageFileName}\r\n    alt={props.alt}\r\n    height={props.imageBlockHeight}\r\n    width={props.imageBlockWidth}\r\n    onClick={props.clickHandler}\r\n  />\r\n);\r\n\r\nexport default ImageBlock;\r\n","import React from \"react\";\r\nimport \"./ImageBlockListing.css\";\r\nimport ImageBlock from \"../ImageBlock\";\r\n\r\nconst ImageBlockListing = props => (\r\n  <div className=\"container\">\r\n    <div className=\"row\">\r\n      {props.imageFileNames.map((imageFileName, index) => {\r\n        return (\r\n          <ImageBlock\r\n            key={index}\r\n            imageFileName={imageFileName}\r\n            alt={imageFileName}\r\n            clickHandler={props.clickHandler}\r\n            gameStatus={props.gameStatus}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ImageBlockListing;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer text-center\">\r\n    <span>\r\n      UCDavis Coding Bootcamp Â© 2019 Copyright:&nbsp;\r\n      <a\r\n        href=\"https://github.com/Bcalderon400/clicky-game\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Brian Calderon\r\n      </a>\r\n    </span>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport ImageFileNames from \"./ImageFileNames\";\nimport Navbar from \"./components/Navbar\";\nimport Banner from \"./components/Banner\";\nimport ImageBlockListing from \"./components/ImageBlockListing\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  state = {\n    imageFileNames: ImageFileNames,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    feedback: \"Click an image to begin!\",\n    gameStatus: 0 //gameStatus: 0 => game in progresss, 1 => game won, 2 => game lost\n  };\n\n  componentDidMount() {\n    this.setState(\n      {\n        imageFileNames: this.shuffle(this.state.imageFileNames)\n      },\n      () => {\n        console.log(\"Shuffled the images on game start\");\n      }\n    );\n  }\n\n  handleClick = event => {\n    // console.log(event.target); // example output => <img class=\"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock\" src=\"/static/media/alchemist.ce4808c0.png\" alt=\"alchemist.png\">\n    // console.log(event.target.alt); // example output => alchemist.png\n    const clickedImageFileName = event.target.alt;\n    // console.log(\"The clicked image is: \" + clickedImageFileName);\n    // console.log(\"state BEFORE: \" + JSON.stringify(this.state));\n    const wasImageClickedBefore = this.imageClickedBefore(clickedImageFileName);\n    if (wasImageClickedBefore) {\n      this.setState(\n        {\n          imageFileNames: this.shuffle(this.state.imageFileNames),\n          // imageFileNames: this.state.imageFileNames, //for debugging only\n          clickedImages: [],\n          score: 0,\n          feedback: \"Game Over! You Guessed The Same Image Twice!\",\n          gameStatus: 2\n        },\n        () => {\n          // console.log(\"IF block state AFTER GAME OVER: \" + JSON.stringify(this.state));\n        }\n      );\n    } else {\n      let newScore = this.state.score + 1;\n      if (newScore === this.state.imageFileNames.length) {\n        this.setState({\n          imageFileNames: this.shuffle(this.state.imageFileNames),\n          // imageFileNames: this.state.imageFileNames, //for debugging only\n          clickedImages: [],\n          score: 0,\n          topScore: newScore,\n          feedback: \"Congrats! You Have Guessed All Of The Images Correctly!\",\n          gameStatus: 1\n        });\n      } else {\n        const clickedImagesCopy = this.state.clickedImages.slice();\n        clickedImagesCopy.push(clickedImageFileName);\n        const newTopScore =\n          newScore > this.state.topScore ? newScore : this.state.topScore;\n        this.setState(\n          {\n            imageFileNames: this.shuffle(this.state.imageFileNames),\n            // imageFileNames: this.state.imageFileNames, //for debugging only\n            clickedImages: clickedImagesCopy,\n            score: newScore,\n            topScore: newTopScore,\n            feedback: \"Yes! You Guessed The Image Correctly!\",\n            gameStatus: 0\n          },\n          () => {\n            // console.log(\"IF block state AFTER CORRECT GUESS: \" + JSON.stringify(this.state));\n          }\n        );\n      }\n    }\n  };\n\n  imageClickedBefore = clickedImageFileName => {\n    for (let index = 0; index < this.state.clickedImages.length; index++) {\n      if (this.state.clickedImages[index] === clickedImageFileName) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Fisher-Yates (aka Knuth) Shuffle algorithm implementation to shuffle images to display in the UI\n  // Copied from stackoverflow post:\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          feedback={this.state.feedback}\n          gameStatus={this.state.gameStatus}\n        />\n        <Banner />\n        <ImageBlockListing\n          imageFileNames={this.state.imageFileNames}\n          clickHandler={this.handleClick}\n          gameStatus={this.state.gameStatus}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}